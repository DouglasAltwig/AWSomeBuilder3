AWSTemplateFormatVersion: 2010-09-09
Description: 'EC2: Amazon Linux 2 (mutable, private)'
Metadata: 
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters: 
      - ParentVPCStack
      - ParentClientStack1
    - Label:
        default: 'Permission Parameters'
      Parameters:
      - KeyName
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - Name
      - InstanceType
    - Label:
        default: 'Operational Parameters'
      Parameters:
      - LogRetentionInDays
Parameters: 
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc-2azs.yaml template'
    Type: 'String'

  ParentClientStack1:
    Description: 'Optional stack name of parent Client Security Group stack based on state/client-sg.yaml template to allow network access from the EC2 instance to whatever uses the client security group.'
    Type: 'String'
    Default: ''

  KeyName:
    Description: 'Key pair of the ec2-user to establish a SSH connection to the EC2 instance.'
    Type: 'String'
    Default: 'US-EAST-1-KEY-PAIR'

  Name:
    Description: 'The name for the EC2 instance.'
    Type: 'String'
    Default: 'API Server'

  InstanceType:
    Description: 'The instance type for the EC2 instance.'
    Type: 'String'
    Default: 't3.nano'

  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Resources:
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  SecurityGroupInSSH:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: {'Fn::ImportValue': !Sub '${ParentClientStack1}-ClientSecurityGroup'}
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  
  SecurityGroupInHTTP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: {'Fn::ImportValue': !Sub '${ParentClientStack1}-ClientSecurityGroup'}
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  
  SecurityGroupInHTTPS:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: {'Fn::ImportValue': !Sub '${ParentClientStack1}-ClientSecurityGroup'}
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'ssm'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'ssmmessages:*' # SSM Agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ssm:UpdateInstanceInformation' # SSM agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ec2messages:*' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ssm:GetDeployablePatchSnapshotForInstance'
            - 'ssm:ListAssociations'
            Resource: '*'
          - Effect: 'Allow'
            Action: 's3:GetObject'
            Resource:
            - !Sub 'arn:${AWS::Partition}:s3:::aws-ssm-${AWS::Region}/*'
            - !Sub 'arn:${AWS::Partition}:s3:::patch-baseline-snapshot-${AWS::Region}/*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action: 'cloudwatch:PutMetricData'
            Resource: '*'
            Condition:
              StringEquals:
                'cloudwatch:namespace': !Ref 'AWS::StackName'
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            - 'logs:DescribeLogGroups'
            Resource: !GetAtt 'Logs.Arn'
      - PolicyName: 'rds'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action: 'rds:*'
            Resource: !Sub 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db/od12u7lnp43wwj9'
      - PolicyName: 's3'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action: 's3:*'
            Resource: 
              - 'arn:aws:s3:::*'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref IAMRole

  VirtualMachine:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: {'Fn::ImportValue': !Sub '${ParentVPCStack}-AZA'}
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: 'ami-04d29b6f966df1537'
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
      SecurityGroupIds: 
      - {'Fn::ImportValue': !Sub '${ParentClientStack1}-ClientSecurityGroup'}
      SubnetId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-PublicSubnetA'}
      Tags:
        - Key: Name
          Value: API-Server

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'

  InstanceId:
    Description: 'The EC2 instance id.'
    Value: !Ref VirtualMachine
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
