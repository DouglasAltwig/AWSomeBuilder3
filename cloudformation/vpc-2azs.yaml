AWSTemplateFormatVersion: 2010-09-09
Description: 'For the purpose of AWSome Builder 3 this CloudFormation template should simulate an on-premises envirentoment containing a VPC, an EC2 as an API-Server and a RDS MySQL as the DBMS.'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC and Subnets Parameters'
      Parameters:
      - CidrBlock
      - PublicSubnetCidrBlockA
      - PublicSubnetCidrBlockB
      - PrivateSubnetCidrBlockA
      - PrivateSubnetCidrBlockB

Parameters:
  CidrBlock: 
    Description: 'CIDR notation for the VPC configuration.'
    Type: 'String'
    Default: '10.0.0.0/16'
    # AllowedPattern: ^[a-zA-Z0-9]*$

  PublicSubnetCidrBlockA:
    Description: 'CIDR notation for the public subnet A.'
    Type: 'String'
    Default: '10.0.0.0/20'

  PublicSubnetCidrBlockB:
    Description: 'CIDR notation for the public subnet B.'
    Type: 'String'
    Default: '10.0.32.0/20'

  PrivateSubnetCidrBlockA:
    Description: 'CIDR notation for the private subnet A.'
    Type: 'String'
    Default: '10.0.16.0/20'

  PrivateSubnetCidrBlockB:
    Description: 'CIDR notation for the private subnet B.'
    Type: 'String'
    Default: '10.0.48.0/20'

Resources: 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref AWS::StackName, VPC]]

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Routes and Route Tables

  PublicRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'Public Route Table A'
  
  PublicRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'Public Route Table B'

  PublicRouteTableInternetRouteA:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicRouteTableInternetRouteB:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Public Subnets

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidrBlockA
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Sub '${AWS::StackName}-Public-Subnet-A-', !Select [0, !GetAZs '']]]

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidrBlockB
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Sub '${AWS::StackName}-Public-Subnet-B-', !Select [1, !GetAZs '']]]
  
  PublicSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  PublicSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTableB

  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: 'Name'
        Value: 'Public Network ACL'

  # Public Inbound Rules

  InboundSSHNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22

  InboundHTTPNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 200
      Protocol: 6
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 80
        To: 80

  InboundHTTPSNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 300
      Protocol: 6
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  InboundEPHNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 400
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535
  
  InboundICMPNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 500
      Protocol: 1
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      Icmp:
        Code: -1
        Type: -1

  InboundMySQLNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 600
      Protocol: 6
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !GetAtt 'VPC.CidrBlock'
      PortRange:
        From: 3306
        To: 3306

  # Public Outbound Rules

  OutboundSSHNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22

  OutboundHTTPNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 200
      Protocol: 6
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 80
        To: 80

  OutboundHTTPSNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 300
      Protocol: 6
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  OutboundEPHNACLP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 400
      Protocol: 6
      RuleAction: "allow"
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'

  OutboundICMPNACLP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 500
      Protocol: 1
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"
      Icmp:
        Code: -1
        Type: -1

  OutboundMySQLNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 600
      Protocol: 6
      RuleAction: "allow"
      Egress: true
      CidrBlock: !GetAtt VPC.CidrBlock
      PortRange:
        From: '3306'
        To: '3306'

  # NetworkAclAssociation for PublicSubnet A and PublicSubnet B

  PublicSubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: 'Name'
          Value: 'NatGateway'
  
  ElasticIPAddress:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: !Ref VPC

  # Private Routes and Route Tables

  PrivateRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'Private Route Table A'

  PrivateRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'Private Route Table B'

  PrivateRouteTableInternetRouteA:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PrivateRouteTableInternetRouteB:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  # Private Subnets

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidrBlockA
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Sub '${AWS::StackName}-Private-Subnet-A-', !Select [0, !GetAZs '']]]

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidrBlockB
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Sub '${AWS::StackName}-Private-Subnet-B-', !Select [1, !GetAZs '']]]
  
  PrivateSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  
  PrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: 'Name'
        Value: 'Private Network ACL'

  # Private Inbound Rules

  PrivateInboundMySQLNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !GetAtt VPC.CidrBlock
      PortRange:
        From: 3306
        To: 3306

  # Private Outbound Rules

  PrivateOutboundMySQLNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: 'allow'
      Egress: true
      CidrBlock: !GetAtt VPC.CidrBlock
      PortRange:
        From: 3306
        To: 3306

  PrivateSubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNetworkAcl

Outputs:
  StackName:
    Description: Stack name.
    Value: !Sub '${AWS::StackName}'

  Region:
    Description: 'The AWS Region.'
    Value: !Ref AWS::Region
  
  NumberOfAZs: 
    Description: 'Number of AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-NumberOfAZs'

  AZList:
    Description: 'List of AZs'
    Value: !Join [',', !GetAZs ''] 
  
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'

  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  
  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
  
  NATGateway:
    Description: 'NAT Gateway.'
    Value: !Ref NATGateway
  
  ElasticIPAddress:
    Description: 'Elastic IP Address.'
    Value: !Ref ElasticIPAddress
  
  PrivateSubnetA:
    Description: 'Private Subnet A.'
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Description: 'Private Subnet B.'
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetB'

  PrivateSubnets:
    Description: 'List of the private subnets.'
    Value: !Join [',', [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  PrivateRouteTableA:
    Description: 'Private Route table A.'
    Value: !Ref PrivateRouteTableA
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableA'

  PrivateRouteTableB:
    Description: 'Private Route table B.'
    Value: !Ref PrivateRouteTableB
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableB'

  PrivateRouteTables:
    Description: 'List of the private route tables.'
    Value: !Join [',', [!Ref PrivateRouteTableA, !Ref PrivateRouteTableB]]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTables'

  PublicSubnetA:
    Description: 'Public Subnet A.'
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA'

  PublicSubnetB:
    Description: 'Public Subnet B.'
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetB'
  
  PublicSubnets:
    Description: 'List of the public subnets.'
    Value: !Join [',', [!Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'

  PublicRouteTableA:
    Description: 'Public Route table A.'
    Value: !Ref PublicRouteTableA
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTableA'

  PublicRouteTableB:
    Description: 'Public Route table B.'
    Value: !Ref PublicRouteTableB
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTableB'

  PublicRouteTables:
    Description: 'List of the public route tables.'
    Value: !Join [',', [!Ref PublicRouteTableA, !Ref PublicRouteTableB]]
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTables'

  RouteTables:
    Description: 'List of the public and private route tables.'
    Value: !Join [',', [!Ref PublicRouteTableA, !Ref PublicRouteTableB, !Ref PrivateRouteTableA, !Ref PrivateRouteTableB ]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTables'