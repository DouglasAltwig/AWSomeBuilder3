# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-node-state-machine
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
useDotenv: true
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  # lambdaHashingVersion: "20201221"
  stage: dev
  region: us-east-1
  environment:
      DYNAMODB_TABLE: "ModerationTable-${opt:stage, self:provider.stage}"
      HOSTNAME: "localhost"
      PORT: 8080
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rekognition:DetectLabels"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:ListAllMyBuckets"
        - "s3:GetBucketLocation"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:GetObjectVersion"
        - "s3:GetBucketAcl"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::*"
        - "arn:aws:s3:::*/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeStream"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:ListStreams"
      Resource: "arn:aws:dynamodb:*:*:table/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
# package:
#   individually: true
#   exclude:
#     - ./**
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  checkfordrugs:
    handler: handler.checkfordrugs
    environment:
      DRUGS_NAME_CONFIDENCE: '{"Herbs":92,"Powder":70,"Pill":99,"Medication":99,"Capsule":95,"Weed":95,"Sugar":59,"Smoke Pipe":86}'
  checkforfirearm:
    handler: handler.checkforfirearm
    environment:
      GUNS_NAME_CONFIDENCE: '{"Gun":98,"Weapon":98,"Weaponry":98,"Handgun":91,"Rifle":63}'
  foundsomething:
    handler: handler.foundsomething
  foundnothing:
    handler: handler.foundnothing
  streamfunction:
    handler: handler.streamfunction
    events:
      - stream: 
          type: dynamodb
          arn:
            Fn::GetAtt: [ModerationDynamoDbTable, StreamArn]
  # orchestrator:
  #   handler: orchestrator.handler
  #   package:
  #     include:
  #       - orchestrator.js
  # job:
  #   handler: job.handler
  #   package:
  #     include:
  #       - job.js

#    Define function environment variables here
#    environment:
#      variable2: value2

stepFunctions:
  stateMachines:
    myStateMachine:
      name: "ModerationEngine"
      definition:
        # Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"
        StartAt: CheckForDrugs
        States:
          CheckForDrugs:
            Type: Task
            Resource: {"Fn::GetAtt": ["CheckfordrugsLambdaFunction", "Arn"]}
            Next: Drugs?
          Drugs?:
            Type: Choice
            Choices:
              - Variable: $.length
                NumericGreaterThan: 0
                Next: FoundSomething
            Default: CheckForFirearm
          CheckForFirearm:
            Type: Task
            Resource: {"Fn::GetAtt": ["CheckforfirearmLambdaFunction", "Arn"]}
            Next: Firearm?
          Firearm?:
            Type: Choice
            Choices:
              - Variable: $.length
                NumericGreaterThan: 0
                Next: FoundSomething
            Default: FoundNothing
          FoundNothing:
            Type: Task
            Resource: {"Fn::GetAtt": ["FoundnothingLambdaFunction", "Arn"]}
            Next: Done
          FoundSomething:
            Type: Task
            Resource: {"Fn::GetAtt": ["FoundsomethingLambdaFunction", "Arn"]}
            Next: Done
          Done:
            Type: Pass
            End: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    ModerationDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "N"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# environment:
#       statemachine_arn: ${self:resources.Outputs.MyStateMachine.Value}
# resources:
# Outputs:
#     MyStateMachine:
#       Description: The ARN of the example state machine
#       Value:
#         Ref: MyStateMachine



# #{AWS::Region}
# #{AWS::AccountId}
# ${self:service}-${opt:stage}
plugins:
  - serverless-dotenv-plugin
  - serverless-step-functions